<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="@{mapperClassName}">
     <!--返回模型-->
    <resultMap id="BaseResultMap" type="@{domainClassName}">

		@{{
			datas:pcolumns,
			elem:elem,
			type:foreach,
			render:~<id column="@{elem.jdbcName}" jdbcType="@{elem.jdbcType}" property="@{elem.javaName}" />
			~
		}}#
		 @{{
			datas:columns,
			elem:elem,
			type:foreach,
			render:~
		<result column="@{elem.jdbcName}" jdbcType="@{elem.jdbcType}" property="@{elem.javaName}" />
		~
		}}#

    </resultMap>

   <sql id="Base_Column_List">
        @{{
			datas:columns,
			elem:elem,
			split:",",
			type:foreach,
			render:"`@{elem.jdbcName}`"
		}}#
    </sql>

 <!-- 根据主键查询 -->
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select 
        <include refid="Base_Column_List" />
        from @{tableName}
        where 1 = 1 
		@{{
			datas:pcolumns,
			elem:elem,
			type:foreach,
			render:~
			and `@{elem.jdbcName}` = #{@{elem.javaName},jdbcType=@{elem.jdbcType}}
		~
		}}#
		
    </select>
    <!-- 根据实体查询单条 -->
    <select id="selectByEntity" parameterType="@{domainClassName}" resultMap="BaseResultMap">
        select 
        <include refid="Base_Column_List" />
        from @{tableName}
        where 1 = 1
		@{{
			datas:columns,
			elem:elem,
			type:foreach,
			render:~
		<if test="@{elem.javaName} != null" >
            and `@{elem.jdbcName}` = #{@{elem.javaName},jdbcType=@{elem.jdbcType}}
        </if>
		~
		}}#

        limit 1
    </select>
    
    <!-- 根据实体查询多条 -->
    <select id="selectByEntityList" parameterType="@{domainClassName}" resultMap="BaseResultMap">
        select 
        <include refid="Base_Column_List" />
        from @{tableName}
        where 1 = 1
         @{{
			datas:columns,
			elem:elem,
			type:foreach,
			render:~
		<if test="@{elem.javaName} != null" >
            and `@{elem.jdbcName}` = #{@{elem.javaName},jdbcType=@{elem.jdbcType}}
        </if>
		~
		}}#

    </select>
    
     <!-- 根据实体查询ID -->
    <select id="selectById" parameterType="@{domainClassName}" resultType="java.lang.String">
        select 
       @{{
			datas:pcolumns,
			elem:elem,
                        split:",",
			type:foreach,
			render:"@{elem.javaName}"
		}}#

         from @{tableName}
        where 1 = 1
         @{{
			datas:columns,
			elem:elem,
			type:foreach,
			render:~
		<if test="@{elem.javaName} != null" >
            and `@{elem.jdbcName}` = #{@{elem.javaName},jdbcType=@{elem.jdbcType}}
        </if>
		~
		}}#

         limit 1
    </select>
    
       <!-- 根据实体查询IDs-->
    <select id="selectByIds" parameterType="@{domainClassName}" resultType="java.lang.String">
        select 
 @{{
			datas:pcolumns,
			elem:elem,
                        split:",",
			type:foreach,
			render:"@{elem.javaName}"
		}}#

      from @{tableName}
        where 1 = 1
        @{{
			datas:columns,
			elem:elem,
			type:foreach,
			render:~
		<if test="@{elem.javaName} != null" >
            and `@{elem.jdbcName}` = #{@{elem.javaName},jdbcType=@{elem.jdbcType}}
        </if>
		~
		}}#

    </select>
    
    <!-- 根据主键删除 -->
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        delete 
		from @{tableName} 
		where 1=1 
		@{{
			datas:pcolumns,
			elem:elem,
			type:foreach,
			render:~
		and `@{elem.jdbcName}` = #{@{elem.javaName},jdbcType=@{elem.jdbcType}}
		~
		}}#
    </delete>
	
    <!--  插入单条记录（全字段）  -->
    <insert id="insert" parameterType="@{domainClassName}" >
        insert into @{tableName} (
          @{{
			datas:columns,
			elem:elem,
			split:",",
			type:foreach,
			render:"`@{elem.jdbcName}`"
		}}#

        )
        values (
		@{{
			datas:columns,
			elem:elem,
			split:",",
			type:foreach,
			render:"#{@{elem.javaName},jdbcType=@{elem.jdbcType}}"
		}}#
        )
    </insert>
	
       <!--  插入单条记录（字段为空则不添加）  -->
    <insert id="insertSelective" parameterType="@{domainClassName}" >
        insert into @{tableName}
        <trim prefix="(" suffix=")" suffixOverrides=",">
		@{{
			datas:pcolumns,
			elem:elem,
			split:",",
			type:foreach,
			render:~
			`@{elem.jdbcName}`
			~
		}}#
		@{{
			datas:columns,
			elem:elem,
			type:foreach,
			render:~
		<if test="@{elem.javaName} != null" >
            , `@{elem.jdbcName}`
        </if>
		~
		}}#


        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">

		@{{
			datas:pcolumns,
			elem:elem,
			split:",",
			type:foreach,
			render:~		
			#{@{elem.javaName},jdbcType=@{elem.jdbcType}}
			~
		}}#
		@{{
			datas:columns,
			elem:elem,
			type:foreach,
			render:~
		<if test="@{elem.javaName} != null" >
            , #{@{elem.javaName},jdbcType=@{elem.jdbcType}}
        </if>
		~
		}}#
       
        </trim>
    </insert>
	
   <!-- 根据主键修改  -->
    <update id="updateByPrimaryKey" parameterType="@{domainClassName}">
        update @{tableName}
        <set>
		@{{
			datas:columns,
			elem:elem,
			type:foreach,
			render:~
		<if test="@{elem.javaName} != null" >
            `@{elem.jdbcName}` = #{@{elem.javaName},jdbcType=@{elem.jdbcType}},
        </if>
		~
		}}#
        
        </set>
        where 1=1 
		@{{
			datas:pcolumns,
			elem:elem,
			type:foreach,
			render:~
		and `@{elem.jdbcName}` = #{@{elem.javaName},jdbcType=@{elem.jdbcType}}
		~
		}}#
    </update>
    
       <!--批量插入-->
    <insert id="insertBatch" parameterType="java.util.List" >  
        insert into @{tableName} (
               <include refid="Base_Column_List" />         

        )
        values 
        <foreach collection="list" index="index" item="item" separator=",">  
        (
		@{{
			datas:columns,
			elem:elem,
			split:",",
			type:foreach,
			render:~
			#{item.@{elem.javaName},jdbcType=@{elem.jdbcType}}
		~
		}}#

        )
        </foreach>
      </insert>
     <!--批量修改-->
    <update id="updateBatch" parameterType="java.util.List">  
        <foreach  collection="list" index="index" item="item"  separator=";">     
           update @{tableName}
        set 
		@{{
			datas:columns,
			elem:elem,
			split:",",
			type:foreach,
			render:~
		`@{elem.jdbcName}` = #{item.@{elem.javaName},jdbcType=@{elem.jdbcType}}~
		}}#
        where 1=1 
		@{{
			datas:pcolumns,
			elem:elem,
			type:foreach,
			render:~
		and `@{elem.jdbcName}` = #{item.@{elem.javaName},jdbcType=@{elem.jdbcType}}
		~
		}}#
        </foreach>
    </update>
	
     <!--根据主键批量删除-->
    <delete id="deleteBatch" parameterType="java.util.List"> 
        delete from @{tableName} where id in
        <foreach close=")" collection="list" index="index" item="item" open="(" separator=",">  
            #{item}  
        </foreach> 
    </delete>
 
  <!--根据某些条件删除-->
    <delete id="deleteByEntity" parameterType="@{domainClassName}"> 
        delete from @{tableName} where  1 = 1
          @{{
			datas:columns,
			elem:elem,
			type:foreach,
			render:~
		<if test="@{elem.javaName} != null" >
            and `@{elem.jdbcName}` = #{@{elem.javaName},jdbcType=@{elem.jdbcType}}
        </if>
		~
		}}#

    </delete>
    
    ###ourbatis###

</mapper>